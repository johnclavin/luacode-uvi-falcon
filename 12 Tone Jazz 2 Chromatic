-- 12 Tone Jazz 2 Chromatic - Lua Programming Language

chromatic = {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}

used = {}

primeOrder = {1,2,3,4,5,6,7,8,9,10,11}

primeOrderR = {12,11,10,9,8,7,6,5,4,3,2}

measures_8 = {}

switchTable = {1,1,1,2,2,2,2,2,3,4,4,4,5,5,5,5}

-- for y = 600, 700 do
-- measures_8[y] = 20
-- end

function onNote(e)
  -- compose_primeOrder()
  assemble_8_measures()
  playsolution()
end

function playsolution()
  count = 1
  for j = 1, 80 do -- length of piece
    switchIndex = math.random(16)
    switch = switchTable[switchIndex]

    noteIndex = measures_8[count]
    -- print("Top Internal Note Index - "..noteIndex)
    if(switch == 1) then -- many notes
      randAmount = math.random(16)
      for z = 1, randAmount do
        if(math.random(100) > 50) then
          octave = 0
        else
          octave = - 12
        end
        playNote(chromatic[noteIndex] + octave, 100, 146)
        count = count + 1
        noteIndex = measures_8[count]
        -- print("2 Internal Note Index - "..noteIndex)
        wait(150)
      end
      playNote(chromatic[noteIndex] + octave, 106, 590)
      count = count + 1
      wait(600)

    elseif(switch == 2) then -- one note
      if(math.random(100) > 50) then
        octave = 0
      else
        octave = - 12
      end
      playNote(chromatic[noteIndex] + octave, 110, 590)
      count = count + 1
      wait(600)

    elseif(switch == 3) then -- many bass notes
      randAmount = math.random(0, 5)
      for z  = 1, randAmount do
        playNote(chromatic[noteIndex] - 24, 90, 590)
        count = count + 1
        noteIndex = measures_8[count]
        -- print("3 Internal Note Index - "..noteIndex)
        wait(600)
      end
      playNote(chromatic[noteIndex] - 24, 90, 890)
      count = count + 1
      wait(900)

    elseif(switch == 4) then -- one bass note
      playNote(chromatic[noteIndex] - 24, 90, 590)
      count = count + 1
      wait(600)

    else -- one chord
      playNote(chromatic[noteIndex] - 12, 80, 1490)
      playNote(chromatic[noteIndex], 80, 1490)
      count = count + 1
      noteIndex = measures_8[count]
      -- print("4 Internal Note Index - "..noteIndex)
      playNote(chromatic[noteIndex], 80, 1490)
      count = count + 1
      noteIndex = measures_8[count]
      -- print("5 Internal Note Index - "..noteIndex)
      playNote(chromatic[noteIndex], 80, 1490)
      count = count + 1
      wait(1500)
    end

    -- print("j - "..j.."  Count - "..count.."  NoteIndex - "..noteIndex)

  end
  -- last chord
  noteIndex = measures_8[count]
  -- print("*Internal Note Index - "..noteIndex)
  playNote(chromatic[noteIndex] - 12, 86, 2000)
  playNote(chromatic[noteIndex], 86, 2000)
  count = count + 1
  noteIndex = measures_8[count]
  -- print("*Internal Note Index - "..noteIndex)
  playNote(chromatic[noteIndex], 86, 2000)
  count = count + 1
  noteIndex = measures_8[count]
  -- print("*Internal Note Index - "..noteIndex)
  playNote(chromatic[noteIndex], 86, 2000)
  count = count + 1
  wait(2100)

  -- print("Count - "..count.."  NoteIndex - "..noteIndex)

end

function assemble_8_measures()
  m8index = 1
  for j = 1, 30 do
    for p = 1, 11 do
      measures_8[m8index] = primeOrder[p]
      m8index = m8index + 1
    end
    for r = 1, 11 do
      measures_8[m8index] = primeOrderR[r]
      m8index = m8index + 1
    end
  end

  -- for x = 1, 700 do
  -- prnt = measures_8[x]
  -- print("mea8 number - "..x.." "..prnt)
  -- end
end

function compose_primeOrder()
  for u = 1, 12 do
    used[u] = true
  end
  for pIndex = 1, 12 do
    local note = random12()
    primeOrder[pIndex] = note
    -- print("Prime Order  "..pIndex.."  "..note)
  end
  -- print()
end

function random12()
  notfound = true
  while notfound do
    candidate = math.random(1, 12)
    if used[candidate] == true then
      goodnote = candidate
      used[candidate] = false
      notfound = false
    end
  end
  return goodnote
end
